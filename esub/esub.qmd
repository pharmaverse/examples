---
title: "eSubmission"
---

## Introduction

This article shares learnings from R and open source based submission experiences,
and how these can be achieved using pharmaverse packages in conjunction.

The main pharmaverse packages specifically supporting eSubmission are as follows: 

-   [`{xportr}`](https://atorus-research.github.io/xportr/): delivers the SAS transport file (XPT) and eSub checks.
-   [`{pkglite}`](https://merck.github.io/pkglite/): enables exchange of closed source R packages via text files.
-   [`{datasetjson}`](https://atorus-research.github.io/datasetjson/): experimental package to deliver Dataset-JSON.

Note that a python equivalent of `{pkglite}` also exists, read more at [pharmaverse python](https://pharmaverse.org/e2eclinical/python/).

## R Submissions Working Group

Within the R Consortium, the R Submissions WG have conducted several pilots to
provide open examples of submitting R-based clinical trial data/analysis packages
to the FDA.

Anyone new to R-based submissions should definitely check out the open materials
from this team [here](https://rconsortium.github.io/submissions-wg/).

Since these pilots laid the foundation, several major pharma companies have
submitted primarily using R to health authorities across the world, so this
article includes a mix of learnings from the pilots and real submissions.

## Submission Contents

The areas of eSubmission that pharmaverse packages are most useful for would be
data, readable code, and documentation.

Each of the sections below talk in more detail of these areas, plus specific
mention of validation which is a common topic raised around usage of open
source.

### Data

The main 2 forms of dataset for CDISC clinical trial submission are SDTM and
ADaM. Refer to the separate example articles on this site for how best to go
about producing these.

For eSubmission the most common approach to deliver these to health authorities
is as xpt files, and for this we use `{xportr}`. This package works well with
`{metacore}` harmonized specification objects as shown in the ADaM articles
on this site.

Here is an example call using a synthetic `ADSL` ADaM from `{pharmaverseadam}`
that shows how to produce xpt files, as well as how certain `{xportr}`
functions can be used to take attributes directly from specifications so as
to ensure specification to dataset consistency. This helps to ensure
eSubmission-readiness. Additionally the package includes a number of built-in
CDISC conformance checks as detailed on the
[site](https://atorus-research.github.io/xportr/).

```{r clean, message=FALSE, warning=FALSE, results='hold'}
library(metacore)
library(xportr)
library(pharmaverseadam)
library(dplyr)

# Read in metacore object
metacore <- spec_to_metacore(
  path = "./metadata/safety_specs.xlsx",
  # All datasets are described in the same sheet
  where_sep_sheet = FALSE
) %>%
  select_dataset("ADSL")

dir <- tempdir() # Specify the directory for saving the XPT file

adsl <- pharmaverseadam::adsl %>%
  # Coerce variable type to match specification
  xportr_type(metacore) %>%
  # Assigns variable label from metacore specifications
  xportr_label(metacore) %>%
  # Assigns dataset label from metacore specifications
  xportr_df_label(metacore) %>%
  # Assigns SAS length from a variable level metadata
  xportr_length(metacore) %>%
  # Assigns variable format from metacore specifications
  xportr_format(metadata = metacore) %>%
  # Write xpt v5 transport file
  xportr_write(file.path(dir, "adsl.xpt"), metadata = metacore, domain = "ADSL")
```

```{r label}
# We can examine that the attributes have been correctly applied, for example
# as follows for the dataset label
attr(adsl, "label")
```

Now here's an example where the checks would help to identify future possible
eSubmission challenges. Note the console messages explaining the issues.

```{r challenges}
adsl_challenges <- pharmaverseadam::adsl %>%
  # Make a numeric variable as character, which conflicts with specifications
  mutate(AGE = as.character(AGE)) %>%
  # Add a variable that is name >8 characters which is not allowed for xpt v5
  mutate(REGIONCAT = REGION1)

adsl_challenges <- adsl_challenges %>%
  # Coerce variable type to match specification
  # This time we use the verbose argument to add a warning to the console
  xportr_type(metacore, verbose = "warn") %>%
  # Write xpt v5 transport file
  xportr_write(file.path(dir, "adsl.xpt"), metadata = metacore, domain = "ADSL")
```

Furthermore, the package functions also include certain arguments that you can
use to help shape to your specific submission needs.

The below shows how some specific FDA requirements can be achieved using
the `length_source` argument from `xportr::xportr_length()` and the
`max_size_gb` argument from `xportr::xportr_write()`, as detailed in the comments.
In this case, the dataset splits would be very unlikely to occur in practice for
`ADSL` but would be much more likely on a BDS dataset such as `ADLB` for a
large study.

```{r examples}
adsl_example <- pharmaverseadam::adsl %>%
  # Coerce variable type to match specification
  xportr_type(metacore) %>%
  # Assigns variable label from metacore specifications
  xportr_label(metacore) %>%
  # Assigns dataset label from metacore specifications
  xportr_df_label(metacore) %>%
  # Assigns length from the maximum length of any value of the variable as per FDA data minimisation guidance
  xportr_length(metadata = metacore, length_source = "data") %>%
  # Assigns variable format from metacore specifications
  xportr_format(metadata = metacore) %>%
  # Write xpt v5 transport file but split into smaller subsets if greater than 5GB
  # according to the FDA cutoff size
  xportr_write(file.path(dir, "adsl.xpt"), metadata = metacore, domain = "ADSL", max_size_gb = 5)
```

As an alternative to xpt, we also have `{datasetjson}` which enables the
emerging new submission data exchange standard Dataset-JSON detailed
[here](https://www.cdisc.org/standards/data-exchange/dataset-json). As this
package is still experimental, we don't include code examples here but over time
and as momentum grows we can add extra examples to this article.

### Readable Code

Explain the benefits of using open codebases and more modular structure like admiral.


### Documentation

Closed source - mention pkglite but also R Submission WG pilot used zip files.


### Validation

https://pharmaverse.org/e2eclinical/developers/ validation section
