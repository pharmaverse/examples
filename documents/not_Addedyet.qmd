
# Extension: customize your autoslideR experience

### Create custom function from templates

Unless your requirements are really specific, the most efficient way to write a study function is to base it off of a template function from the [TLG catalogue](https://insightsengineering.github.io/tlg-catalog/stable/). 

The function you would want to create should take as input a list of datasets and potentially additional arguments. 
Within the function, you should not worry about filtering the data, as this should be taken care of with the `filters.yml` file and the general workflow. 

To see a complete list of template functions that the `autoslider.core` provides, we can call the function below to retrieve their names.
```{r, include = TRUE, eval = FALSE}
list_all_templates()
```
This will return a character vector of supported templates, you can extract their basenames (e.g., `t_dm_slide`, `g_ae_slide`, etc.), each corresponding to a table type stored in the `R/` folder of the package.

Then, use the `use_template()` function to generate a template script that you can customize. For example:

```{r_function_call, include = TRUE, eval = TRUE}
use_template(template = "t_dd_slide", function_name = "tryout")

```
This will create a function called `tryout` that resides in the file with the `t_dd_slide` (Death table) template at `tryout.R`. Please feel free to make your own modification and customization based on the goal of your study. 

For detailed template usage instructions, please refer to vignette `tlg_templates`.

This function, like other template functions in `autoslider.core`, will convert data into TLG formats, given the help of configurations in `spec.yml` and `filters.yml`. Now let's verify this.


### Integrate it into the general workflow

You have to keep in mind that the function you created must be in the global environment when calling the `create_outputs` function. 
This is the case for all `autoslider.core` functions, as you attach the `autoslider.core` package (with your `library(autoslider.core)` call), so all (exported) function of the `autoslider.core` package are available.

If you store your custom function in a separate script, you would need to source that script at some point before calling the function.

Now you just have to make sure the two `.yml` files are correctly specified. Specifically, you have to append a new entry into `spec.yml` to incorporate the new program you just created. For example:

```{r, eval = FALSE}
- program: tryout
  titles: Deaths and Causes of Death
  footnotes: ''
  paper: L6
  suffix: SE
  args:
    arm: "TRT01A"
```

You also have to make sure that filters.yml contains the filter that matches your purposes specified in `suffix`. In this case:
```{r, eval = FALSE}
SE:
  title: Safety Evaluable Population
  condition: SAFFL=='Y'
  target: adsl
  type: slref
```

Then you can load the filters and generate the outputs.

```{r, include = FALSE}
library(yaml)

# Create the YAML content
yaml_content <- '
SE:
  title: Safety Evaluable Population
  condition: SAFFL=="Y"
  target: adsl
  type: slref
'

# Create a temporary YAML file
filters <- tempfile(fileext = ".yaml")

# Write the YAML content to the temporary file
write(yaml_content, file = filters)

# Create the specs entry
specs_entry <- '
- program: tryout
  titles: Deaths and Causes of Death
  footnotes: ""
  paper: L6
  suffix: SE
  args:
    arm: "TRT01A"
'

# Create a temporary specs entry file
spec_file <- tempfile(fileext = ".yaml")

# Write the specs entry to the temporary file
write(specs_entry, file = spec_file)

```

```{r, eval = TRUE}
filters::load_filters(filters, overwrite = TRUE)

outputs <- spec_file %>%
  read_spec() %>%
  filter_spec(., program == "tryout") %>%
  generate_outputs(datasets = data) %>%
  decorate_outputs()

# Naming convention is program name + suffix
outputs$tryout_SE

```

Once this works, we can generate the slides, feel free to pass in your desired pptx template. 

```{r, eval = FALSE}
filepath <- "outputs/tryout.pptx"
generate_slides(outputs, outfile = filepath, template = "path/to/your/custom_template.pptx")
```


not added yet
Below is an example presentation output with placeholder slides (explained in the `generate_placeholder_slides` vignette ) and SREP standard presentation slides:



![With placeholder example 1](pharmaverse_output_1.png){fig-align="center"}
![With placeholder example 2](pharmaverse_output_2.png){fig-align="center"}
